<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="AdminClient">

    <!-- 토큰 리스트 카운트. -->
    <select id="selectCount" parameterType="com.apollo.exchange.admin.client.dto.AdminClientSearchDTO" resultType="int">
        <![CDATA[
            SELECT
                COUNT(C.CLIENT_ID)
            FROM
                CLIENT C
                INNER JOIN WALLET_CLIENT WC ON C.CLIENT_ID = WC.CLIENT_ID
                INNER JOIN WALLET W ON WC.WALLET_ID = W.WALLET_ID
                INNER JOIN WALLET_ROLE WR ON W.WALLET_ID = WR.WALLET_ID
            WHERE 1 AND WR.ROLE = 'CLIENT'
        ]]>
            <if test="symbol != null &amp;&amp; symbol !=''">
                <![CDATA[    AND C.SYMBOL = '${symbol}' ]]>
            </if>
            <if test="keywordType != null &amp;&amp; keywordType !=''">
                <![CDATA[       AND ${keywordType} like '%${keyword}%' ]]>
            </if>
            <if test="apiKey != null &amp;&amp; apiKey != ''"> AND C.API_KEY = #{apiKey} </if>
            <if test="clientCode != null &amp;&amp; clientCode != ''"> AND C.CLIENT_CODE = #{clientCode} </if>
            <if test="timeSearchKey != null &amp;&amp; timeSearchKey !=''">
                <if test="searchDateStart != null &amp;&amp; searchDateStart !=''">
                    <![CDATA[ AND ${timeSearchKey} >= '${searchDateStart}' ]]>
                </if>
                <if test="searchDateEnd != null &amp;&amp; searchDateEnd !=''">
                    <![CDATA[ AND ${timeSearchKey} <= '${searchDateEnd}' ]]>
                </if>
            </if>
    </select>

    <!-- 토큰 리스트 가져오기. -->
    <select id="selectClientList" parameterType="com.apollo.exchange.admin.client.dto.AdminClientSearchDTO" resultType="com.apollo.exchange.admin.client.dto.AdminClientDTO">
        <![CDATA[
            SELECT *
            FROM (
                 SELECT
                    @ROWNUM := @ROWNUM + 1 AS ROWNUM
                    , A.*
                 FROM (
                     SELECT
                         C.CLIENT_ID
                         , C.SYMBOL
                         , C.CLIENT_CODE
                         , C.API_KEY
                         , C.NAME
                         , C.USE_YN
                         , C.BUY_FEE
                         , C.SELL_FEE
                         , C.CLIENT_TRADER_USE_YN
                         , C.BUY_BENIFIT_USE_YN
                         , C.SELL_BENIFIT_USE_YN
                         , C.REG_DATE
                         , W.WALLET_ADDRESS
                     FROM
                        CLIENT C
                        INNER JOIN WALLET_CLIENT WC ON C.CLIENT_ID = WC.CLIENT_ID
                        INNER JOIN WALLET W ON WC.WALLET_ID = W.WALLET_ID
                        INNER JOIN WALLET_ROLE WR ON W.WALLET_ID = WR.WALLET_ID
                    WHERE 1 AND WR.ROLE = 'CLIENT'
        ]]>
                    <if test="symbol != null &amp;&amp; symbol !=''">
                        <![CDATA[    AND C.SYMBOL = '${symbol}' ]]>
                    </if>
                    <if test="keywordType != null &amp;&amp; keywordType !=''">
                        <![CDATA[    AND ${keywordType} like '%${keyword}%' ]]>
                    </if>
                    <if test="apiKey != null &amp;&amp; apiKey != ''"> AND C.API_KEY = #{apiKey} </if>
                    <if test="clientCode != null &amp;&amp; clientCode != ''"> AND C.CLIENT_CODE = #{clientCode} </if>
                    <if test="timeSearchKey != null &amp;&amp; timeSearchKey !=''">
                        <if test="searchDateStart != null &amp;&amp; searchDateStart !=''">
                            <![CDATA[ AND ${timeSearchKey} >= '${searchDateStart}' ]]>
                        </if>
                        <if test="searchDateEnd != null &amp;&amp; searchDateEnd !=''">
                            <![CDATA[ AND ${timeSearchKey} <= '${searchDateEnd}' ]]>
                        </if>
                    </if>
        <![CDATA[
                 ) A, (SELECT @ROWNUM :=0) TEMP
        ]]>
        <if test="orderByColumn != null &amp;&amp; orderByColumn !=''">
        <![CDATA[ ORDER BY ${orderByColumn} ${orderByType} ]]>
        </if>
        <![CDATA[
                 LIMIT ${start}, ${limit}
             ) RESULT
        ]]>
    </select>

    <select id="selectClientOwner" parameterType="com.apollo.exchange.admin.client.dto.AdminClientSearchDTO" resultType="com.apollo.exchange.admin.client.dto.AdminClientDTO">
        SELECT
            C.CLIENT_ID
            , C.CLIENT_CODE
            , C.SYMBOL
            , C.API_KEY
            , C.NAME
            , C.USE_YN
            , C.BUY_FEE
            , C.SELL_FEE
            , C.CLIENT_TRADER_USE_YN
            , C.BUY_BENIFIT_USE_YN
            , C.SELL_BENIFIT_USE_YN
            , T.UNIT_PRICE
            , W.WALLET_ADDRESS
            , W.BANK_NAME
            , W.BANK_OWNER
            , W.BANK_ACCOUNT
            , W.NAME AS WALLET_NAME
            , WR.ROLE
        FROM
            CLIENT C
        INNER JOIN TOKEN T ON C.SYMBOL = T.SYMBOL
        INNER JOIN WALLET_CLIENT WC ON C.CLIENT_ID = WC.CLIENT_ID
        INNER JOIN WALLET W ON WC.WALLET_ID = W.WALLET_ID
        INNER JOIN WALLET_ROLE WR ON W.WALLET_ID = WR.WALLET_ID
        WHERE
            WR.ROLE = #{role}
    </select>

    <!-- 토큰 상세 가져오기. -->
    <select id="selectOne" parameterType="com.apollo.exchange.admin.client.dto.AdminClientSearchDTO" resultType="com.apollo.exchange.admin.client.dto.AdminClientDTO">
        SELECT
            C.CLIENT_ID
            , C.SYMBOL
            , C.CLIENT_CODE
            , C.API_KEY
            , C.NAME
            , C.USE_YN
            , C.BUY_FEE
            , C.SELL_FEE
            , C.CLIENT_TRADER_USE_YN
            , C.BUY_BENIFIT_USE_YN
            , C.SELL_BENIFIT_USE_YN
            , C.REG_DATE
            , W.WALLET_ADDRESS
            , W.BANK_NAME
            , W.BANK_OWNER
            , W.BANK_ACCOUNT
        FROM
            CLIENT C
            LEFT JOIN WALLET_CLIENT WC ON C.CLIENT_ID = WC.CLIENT_ID
            LEFT JOIN WALLET W ON WC.WALLET_ID = W.WALLET_ID
            LEFT JOIN WALLET_ROLE WR ON W.WALLET_ID = WR.WALLET_ID
        WHERE 1
        <if test="role != null &amp;&amp; role != ''"> AND WR.ROLE = #{role} </if>
        <if test="clientId != null &amp;&amp; clientId != ''"> AND C.CLIENT_ID = #{clientId} </if>
        <if test="clientCode != null &amp;&amp; clientCode != ''"> AND C.CLIENT_CODE = #{clientCode} </if>
        <if test="apiKey != null &amp;&amp; apiKey != ''"> AND C.API_KEY = #{apiKey} </if>
    </select>

    <select id="selectList" parameterType="com.apollo.exchange.admin.client.dto.AdminClientSearchDTO" resultType="com.apollo.exchange.admin.client.dto.AdminClientDTO">
        SELECT *
        FROM CLIENT C
        WHERE 1
        <if test="apiKey != null &amp;&amp; apiKey != ''"> AND C.API_KEY = #{apiKey} </if>
        <if test="clientCode != null &amp;&amp; clientCode != ''"> AND C.CLIENT_CODE = #{clientCode} </if>
    </select>

    <update id="updateOne" parameterType="com.apollo.exchange.admin.client.dto.AdminClientDTO">
        UPDATE
            CLIENT
        SET
            SYMBOL = #{symbol}
            , CLIENT_CODE = #{clientCode}
            , API_KEY = #{apiKey}
            , NAME = #{name}
            , SELL_FEE = #{sellFee}
            , BUY_FEE = #{buyFee}
            , CLIENT_TRADER_USE_YN = #{clientTraderUseYn}
            , BUY_BENIFIT_USE_YN = #{buyBenifitUseYn}
            , SELL_BENIFIT_USE_YN = #{sellBenifitUseYn}
            , USE_YN = #{useYn}
        WHERE
            CLIENT_ID = #{clientId}
    </update>

    <insert id="insertOne" parameterType="com.apollo.exchange.admin.client.dto.AdminClientDTO" useGeneratedKeys="true" keyProperty="clientId" keyColumn="client_id">
        INSERT INTO CLIENT (SYMBOL, CLIENT_CODE, API_KEY, NAME, SELL_FEE, BUY_FEE, CLIENT_TRADER_USE_YN, BUY_BENIFIT_USE_YN, SELL_BENIFIT_USE_YN, USE_YN)
        VALUES (#{symbol}, #{clientCode}, #{apiKey}, #{name}, #{sellFee}, #{buyFee}, #{clientTraderUseYn}, #{buyBenifitUseYn}, #{sellBenifitUseYn}, #{useYn})
    </insert>

</mapper>
